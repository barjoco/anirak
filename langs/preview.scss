$alive: royalblue;
$dead: beige;

body {
  max-width: 40em;
  margin: 0 auto;
}

a {
  display: block;
  padding: 1em;
}

table {
  border-collapse: collapse;
  border: solid thick darkgreen;
  margin: 1em auto;
}

td {
  border: solid thin;
  position: relative;
  overflow: hidden;
  padding: 0;
}

td label {
  display: block;
  height: 1em;
  width: 1em;
  background: $dead;
}

input {
  position: absolute;
  left: -100%;
}

@for $i from 1 through 20 {
  @for $j from 1 through 20 {
    input:nth-of-type(#{($i - 1) * 20 + $j}):checked
      ~ table
      tr:nth-of-type(#{$i})
      td:nth-of-type(#{$j})
      label {
      background: $alive;
    }
  }
}

input#go ~ label[for="go"] {
  display: block;
  font: 200% bold;
  text-align: center;
  padding: 0.5em;
  width: 6em;
  margin: 0.5em auto;

  background: #cce;
  border: darkgray;
  border-radius: 0.5em;
}

input#go ~ label[for="go"]::before {
  content: "RUN";
  color: darkgreen;
}

input#go:checked ~ label[for="go"]::before {
  content: "RESET";
  color: red;
}

input#go:checked + div.game {
  & table {
    border: red thick solid;
  }
  & label {
    transition: background 1s;
    background: $dead;
    pointer-events: none;
  }

  @for $i from 1 through 20 {
    @for $j from 1 through 20 {
      /* rule if previously alive, needs 2 neighbours */
      &
        input.n#{($i)}-#{$j}:checked
        ~ input.n#{($i)}-#{$j}:checked
        ~ input:nth-of-type(#{($i - 1) * 20 + $j}):checked
        ~ table
        tr:nth-of-type(#{$i})
        td:nth-of-type(#{$j})
        label {
        background: $alive;
      }
      /* but neighbours could be after in the list */
      &
        input.n#{($i)}-#{$j}:checked
        ~ input:nth-of-type(#{($i - 1) * 20 + $j}):checked
        ~ input.n#{($i)}-#{$j}:checked
        ~ table
        tr:nth-of-type(#{$i})
        td:nth-of-type(#{$j})
        label {
        background: $alive;
      }
      &
        input:nth-of-type(#{($i - 1) * 20 + $j}):checked
        ~ input.n#{($i)}-#{$j}:checked
        ~ input.n#{($i)}-#{$j}:checked
        ~ table
        tr:nth-of-type(#{$i})
        td:nth-of-type(#{$j})
        label {
        background: $alive;
      }
      /* if previously dead, needs exactly 3 neighbours */
      &
        input.n#{($i)}-#{$j}:checked
        ~ input.n#{($i)}-#{$j}:checked
        ~ input.n#{($i)}-#{$j}:checked
        ~ table
        tr:nth-of-type(#{$i})
        td:nth-of-type(#{$j})
        label {
        background: $alive;
      }
      /* if 4 or more neighbours, dies of overcrowding */
      &
        input.n#{($i)}-#{$j}:checked
        ~ input.n#{($i)}-#{$j}:checked
        ~ input.n#{($i)}-#{$j}:checked
        ~ input.n#{($i)}-#{$j}:checked
        ~ table
        tr:nth-of-type(#{$i})
        td:nth-of-type(#{$j})
        label {
        background: $dead;
      }
    }
  }
}
